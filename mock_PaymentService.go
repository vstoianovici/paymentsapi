// Code generated by mockery v1.0.0. DO NOT EDIT.

package paymentsapi

import mock "github.com/stretchr/testify/mock"
import time "time"
import uuid "github.com/satori/go.uuid"

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: p
func (_m *MockPaymentService) CreatePayment(p Payment) (CreatePaymentResponse, error) {
	ret := _m.Called(p)

	var r0 CreatePaymentResponse
	if rf, ok := ret.Get(0).(func(Payment) CreatePaymentResponse); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(CreatePaymentResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Payment) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePayment provides a mock function with given fields: id
func (_m *MockPaymentService) DeletePayment(id uuid.UUID) (*time.Time, error) {
	ret := _m.Called(id)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(uuid.UUID) *time.Time); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListPayments provides a mock function with given fields:
func (_m *MockPaymentService) GetListPayments() ([]Payment, error) {
	ret := _m.Called()

	var r0 []Payment
	if rf, ok := ret.Get(0).(func() []Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: id
func (_m *MockPaymentService) GetPayment(id string) (Payment, error) {
	ret := _m.Called(id)

	var r0 Payment
	if rf, ok := ret.Get(0).(func(string) Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Payment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: p
func (_m *MockPaymentService) UpdatePayment(p UpdatePaymentRequest) (UpdatePaymentResponse, error) {
	ret := _m.Called(p)

	var r0 UpdatePaymentResponse
	if rf, ok := ret.Get(0).(func(UpdatePaymentRequest) UpdatePaymentResponse); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(UpdatePaymentResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(UpdatePaymentRequest) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
